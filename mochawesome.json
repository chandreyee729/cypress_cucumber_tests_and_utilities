{
  "stats": {
    "suites": 3,
    "tests": 10,
    "passes": 9,
    "pending": 1,
    "failures": 0,
    "testsRegistered": 10,
    "passPercent": 90,
    "pendingPercent": 10,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-06-12T20:54:24.376Z",
    "end": "2025-06-12T20:54:36.568Z",
    "duration": 12192
  },
  "results": [
    {
      "uuid": "fc09ee97-ac48-473e-99d4-612c884ef1cf",
      "title": "",
      "fullFile": "cypress/e2e/feature_test/goRestAPI_CRUD.feature",
      "file": "cypress/e2e/feature_test/goRestAPI_CRUD.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "85a8f7b9-2ea9-42da-8dd5-e5d93f869da2",
          "title": "Test all user CRUD features of GoRest APIs",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Update User Details (example #1)",
              "fullTitle": "Test all user CRUD features of GoRest APIs Update User Details (example #1)",
              "timedOut": null,
              "duration": 1374,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a2, _b2, _c2, _d, _e;\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n  id: testCaseStartedId,\n  testCaseId,\n  attempt: attempt++,\n  timestamp: (0, messages_1.createTimestamp)()\n});\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nconst onAfterStep = (options) => {\n  var _a3, _b3, _c3;\n  const { testStepId, start, result } = options;\n  const end = (0, messages_1.createTimestamp)();\n  if (result === \"pending\" || result === \"skipped\") {\n    if (result === \"pending\") {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.PENDING,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    } else {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    }\n    remainingSteps.shift();\n    for (const skippedStep of remainingSteps) {\n      const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b3 = (_a3 = skippedStep.hook) === null || _a3 === void 0 ? void 0 : _a3.id) !== null && _b3 !== void 0 ? _b3 : (_c3 = skippedStep.pickleStep) === null || _c3 === void 0 ? void 0 : _c3.id, \"Expected a step to either be a hook or a pickleStep\");\n      const testStepId2 = getTestStepId({\n        context,\n        pickleId: pickle.id,\n        hookIdOrPickleStepId\n      });\n      taskTestStepStarted(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n      taskTestStepFinished(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: {\n            seconds: 0,\n            nanos: 0\n          }\n        },\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n    }\n    for (let i = 0, count = remainingSteps.length; i < count; i++) {\n      remainingSteps.pop();\n    }\n    cy.then(() => this.skip());\n  } else {\n    taskTestStepFinished(context, {\n      testStepId,\n      testCaseStartedId,\n      testStepResult: {\n        status: messages_enums_1.TestStepResultStatus.PASSED,\n        duration: (0, messages_1.duration)(start, end)\n      },\n      timestamp: end\n    });\n    remainingSteps.shift();\n  }\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: hook.id\n    });\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const options = {\n        pickle,\n        gherkinDocument,\n        testCaseStartedId\n      };\n      return (0, cypress_1.runStepWithLogGroup)({\n        fn: dryRun ? noopFn : () => registry2.runCaseHook(this, hook, options),\n        keyword: hook.keyword,\n        text: createStepDescription(hook)\n      }).then((result) => {\n        return { start, result };\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: pickleStep.id\n    });\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a2 = pickleStep.astNodeIds) === null || _a2 === void 0 ? void 0 : _a2[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b2 = pickleStep.astNodeIds) === null || _b2 === void 0 ? void 0 : _b2[0]}`);\n    const argument = ((_c2 = pickleStep.argument) === null || _c2 === void 0 ? void 0 : _c2.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: createStepDescription(beforeStepHook),\n          fn: dryRun ? noopFn : () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefinition(this, text, dryRun, argument)\n          }).then((result) => {\n            return afterStepHooks.reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: createStepDescription(afterStepHook),\n                fn: dryRun ? noopFn : () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e) {\n          if (e instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e;\n          }\n        }\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  }\n}",
              "err": {},
              "uuid": "1c1af8e0-e12a-47d5-a246-394af6b1436c",
              "parentUUID": "85a8f7b9-2ea9-42da-8dd5-e5d93f869da2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c1af8e0-e12a-47d5-a246-394af6b1436c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1374,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1646db07-cf94-43f9-a92a-2b8b63cfa73e",
      "title": "",
      "fullFile": "cypress/e2e/integration_test/gorestApiCRUDTests_with APIKeys.cy.js",
      "file": "cypress/e2e/integration_test/gorestApiCRUDTests_with APIKeys.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "35c442de-13d6-4b40-ae45-883e395cc0e0",
          "title": "GoRest API Resource CRUD Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create a new user successfully",
              "fullTitle": "GoRest API Resource CRUD Tests Create a new user successfully",
              "timedOut": null,
              "duration": 574,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@newUser\").then((user) => {\n  cy.request({\n    method: \"GET\",\n    url: `/public/v2/users/${user.id}`,\n    headers: {\n      authorization: `Bearer ${token}`\n    }\n  }).then((userDetails) => {\n    expect(userDetails.status).to.eq(200);\n    expect(userDetails.body.email).to.eq(email);\n  });\n});",
              "err": {},
              "uuid": "c3312a82-8701-4421-9ccb-1240a5be9819",
              "parentUUID": "35c442de-13d6-4b40-ae45-883e395cc0e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update details of a new user successfully",
              "fullTitle": "GoRest API Resource CRUD Tests Update details of a new user successfully",
              "timedOut": null,
              "duration": 564,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUserName = \"goRest Updated\";\ncy.get(\"@newUser\").then((user) => {\n  cy.request({\n    method: \"PUT\",\n    url: `/public/v2/users/${user.id}`,\n    headers: {\n      authorization: `Bearer ${token}`\n    },\n    body: {\n      name: updatedUserName,\n      status: \"inactive\"\n    }\n  }).then((response) => {\n    expect(response.status).to.eq(200);\n    expect(response.body.name).to.eq(updatedUserName);\n  });\n});",
              "err": {},
              "uuid": "6c020ef0-7fb5-484d-8ead-debd4ecdbb55",
              "parentUUID": "35c442de-13d6-4b40-ae45-883e395cc0e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete user successfully",
              "fullTitle": "GoRest API Resource CRUD Tests Delete user successfully",
              "timedOut": null,
              "duration": 1108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@newUser\").then((user) => {\n  const userId = user.id;\n  cy.request({\n    method: \"DELETE\",\n    url: `/public/v2/users/${userId}`,\n    headers: {\n      authorization: `Bearer ${token}`\n    }\n  }).then((response) => {\n    expect(response.status).to.eq(204);\n  });\n  cy.getUserGoRest(token, userId).then((response) => {\n    expect(response.status).to.eq(404);\n  });\n});",
              "err": {},
              "uuid": "7e548706-db63-475b-bf9a-5ed4e23679a4",
              "parentUUID": "35c442de-13d6-4b40-ae45-883e395cc0e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create 9 user posts successfully",
              "fullTitle": "GoRest API Resource CRUD Tests Create 9 user posts successfully",
              "timedOut": null,
              "duration": 3365,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@newUser\").then((user) => {\n  const userId = user.id;\n  for (let post = 1; post <= no_of_posts; post++) {\n    cy.request({\n      method: \"POST\",\n      url: `/public/v2/users/${userId}/posts`,\n      headers: {\n        authorization: `Bearer ${token}`\n      },\n      body: {\n        title: post_title,\n        body: `This is a new post about ${post_title} that is created everytime this request is executed`\n      }\n    }).then((response) => {\n      expect(response.status).to.eq(201);\n    });\n  }\n  cy.getUserPostsGoRest(token, userId).then((posts) => {\n    expect(posts.body.length).to.eq(no_of_posts);\n  });\n});",
              "err": {},
              "uuid": "e12b1e9e-4aa0-4554-99ed-0fc8ae193adb",
              "parentUUID": "35c442de-13d6-4b40-ae45-883e395cc0e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c3312a82-8701-4421-9ccb-1240a5be9819",
            "6c020ef0-7fb5-484d-8ead-debd4ecdbb55",
            "7e548706-db63-475b-bf9a-5ed4e23679a4",
            "e12b1e9e-4aa0-4554-99ed-0fc8ae193adb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5611,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ca8077fa-ad34-4fc0-abae-025ad2f901ee",
          "title": "GoRest API Resource Property Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get all users and validate their properties",
              "fullTitle": "GoRest API Resource Property Tests Get all users and validate their properties",
              "timedOut": null,
              "duration": 327,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(\"/public/v2/users\").then((response) => {\n  expect(response.status).to.eq(200);\n  response.body.forEach((user, index) => {\n    expect(user).to.have.property(\"id\").and.not.be.null;\n    expect(user).to.have.property(\"email\").and.not.be.null;\n    expect(user).to.have.property(\"name\").and.not.be.null;\n    expect(user).to.have.property(\"gender\").and.not.be.null;\n    expect(user).to.have.property(\"status\").and.not.be.null;\n    const formattedUser = JSON.stringify(user, null, 2);\n    console.log(` User[${index}] is ${formattedUser}`);\n  });\n});",
              "err": {},
              "uuid": "bdec8e18-1f13-4c50-96fb-80b7560d1b6a",
              "parentUUID": "ca8077fa-ad34-4fc0-abae-025ad2f901ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bdec8e18-1f13-4c50-96fb-80b7560d1b6a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 327,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7e9f9d1c-45bb-4a82-9e44-e0859e8f62bb",
      "title": "",
      "fullFile": "cypress/e2e/integration_test/supaBase_decode_authToken.cy.js",
      "file": "cypress/e2e/integration_test/supaBase_decode_authToken.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e5270b4f-a110-4826-a7c5-b481a461fd18",
          "title": "Fetch JWT of a Supabase user from stored Local Storage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login to session and store tokens",
              "fullTitle": "Fetch JWT of a Supabase user from stored Local Storage Login to session and store tokens",
              "timedOut": null,
              "duration": 752,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"email is:\", email);\ncy.supaBase_logInAndStoreSessionData(email, password);\ncy.then(() => {\n  const stored = window.localStorage.getItem(\"supabase.dashboard.auth.token\");\n  expect(stored).to.not.be.null;\n  const tokenData = JSON.parse(stored);\n  expect(tokenData.currentSession.access_token).to.exist;\n});",
              "err": {},
              "uuid": "2d92f632-89ec-4db1-acd9-8ccc927a1cd7",
              "parentUUID": "e5270b4f-a110-4826-a7c5-b481a461fd18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Decode SessionData from Local Storage and validate User Info in access token",
              "fullTitle": "Fetch JWT of a Supabase user from stored Local Storage Decode SessionData from Local Storage and validate User Info in access token",
              "timedOut": null,
              "duration": 295,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"email is:\", email);\ncy.supaBase_logInAndStoreSessionData(email, password);\ncy.then(() => {\n  const tokenData = JSON.parse(window.localStorage.getItem(\"supabase.dashboard.auth.token\"));\n  const decoded = jwtDecode(tokenData.currentSession.access_token);\n  cy.log(`Decoded Token: ${JSON.stringify(decoded, null, 2)}`);\n  expect(decoded.email).to.eq(Cypress.env(\"supaBase_auth_userEmail\"));\n  expect(decoded.role).to.exist;\n});",
              "err": {},
              "uuid": "81ef2d04-7f0b-4909-9307-389972d01a5c",
              "parentUUID": "e5270b4f-a110-4826-a7c5-b481a461fd18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fetch Access Token Data",
              "fullTitle": "Fetch JWT of a Supabase user from stored Local Storage Fetch Access Token Data",
              "timedOut": null,
              "duration": 163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get_supaBase_AccessToken().then((token) => {\n  cy.log(\"token: \", JSON.stringify(token));\n});",
              "err": {},
              "uuid": "78844877-c9fd-4a4c-84d4-2163425b5856",
              "parentUUID": "e5270b4f-a110-4826-a7c5-b481a461fd18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login from UI and fetch token",
              "fullTitle": "Fetch JWT of a Supabase user from stored Local Storage Login from UI and fetch token",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "supabase.getEmail().type(Cypress.env(\"supaBase_ui_userEmail\"));\nsupabase.getPassword().type(Cypress.env(\"supaBase_userPassword\"));\nsupabase.getSignIn().click();\ncy.wait(\"@loginRequest\").then((request) => {\n  expect(request.response.statusCode).to.eq(200);\n  expect(request.response.body).to.have.property(\"access_token\");\n});",
              "err": {},
              "uuid": "34b5ce3f-6499-44aa-85a4-0174abcd8564",
              "parentUUID": "e5270b4f-a110-4826-a7c5-b481a461fd18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d92f632-89ec-4db1-acd9-8ccc927a1cd7",
            "81ef2d04-7f0b-4909-9307-389972d01a5c",
            "78844877-c9fd-4a4c-84d4-2163425b5856"
          ],
          "failures": [],
          "pending": [
            "34b5ce3f-6499-44aa-85a4-0174abcd8564"
          ],
          "skipped": [],
          "duration": 1210,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "embeddedScreenshots": true,
        "inlineAssets": true
      },
      "version": "6.2.0"
    }
  }
}